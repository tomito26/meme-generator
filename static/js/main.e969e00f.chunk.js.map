{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","collapseOnSelect","expand","bg","variant","Toggle","aria-controls","Collapse","id","Nav","className","style","height","width","src","alt","Link","href","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","console","log","randMemeImg","url","Container","Row","Col","md","Form","onSubmit","Group","Control","type","placeholder","onChange","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e969e00f.chunk.js","sourcesContent":["import './Header.css'\nimport {Nav,Navbar,} from 'react-bootstrap'\nfunction Header(){\n    return (\n      <div>\n        <header>\n          <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"light\">\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n              <Nav className=\"m-auto\">\n                <img\n                  className=\"img-fluid\"\n                  style={{ height: \"100px\" ,width:\"100px\"}}\n                  src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\n                  alt=\"meme\"\n                />\n                <Nav.Link href=\"#pricing\" className=\"pt-3 ml-3\">\n                  <h1>Meme Generator</h1>\n                </Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          {/* <div className=\"p-3\">\n                    <img  className=\"img-fluid\" style={{height:\"100px\"}}  src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"meme\" />\n                </div>\n                <h3>Meme Generator</h3> */}\n        </header>\n      </div>\n    );\n}\n\nexport default Header","import React, { Component } from 'react'\nimport {Form,Container,Row,Col} from'react-bootstrap'\nimport './Meme.css'\n\nclass MemeGenerator extends Component {\n    constructor(){\n        super()\n        this.state={\n            topText:\"\",\n            bottomText:\"\",\n            randomImg:\"http://i.imgflip.com/1bij.jpg\",\n            allMemeImgs:[],\n\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount(){\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response=>{\n                const {memes} = response.data\n                // console.warn(memes[0])\n                this.setState ({ allMemeImgs: memes}) \n            })\n    }\n\n    handleChange(event){\n        const{name,value} = event.target\n        this.setState({\n            [name]:value\n        })\n    }\n    handleSubmit(event){\n        event.preventDefault()\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n          console.log(randNum);\n        const randMemeImg = this.state.allMemeImgs[randNum].url\n        console.log(randNum)\n        this.setState({randomImg:randMemeImg})\n\n    }\n    render() {\n    \n        return (\n          <div>\n            <Container>\n              <Row>\n                <Col md=\"3\"></Col>\n                <Col md=\"6\">\n                  <Form onSubmit={this.handleSubmit}>\n                    <Form.Group className=\"pt-5 mt-5 d-flex\">\n                      <Form.Control\n                        type=\"text\"\n                        value={this.state.topText}\n                        name=\"topText\"\n                        placeholder=\"Top text\"\n                        onChange={this.handleChange}\n                      />\n                      <br />\n                      <Form.Control\n                        type=\"text\"\n                        value={this.state.bottomText}\n                        name=\"bottomText\"\n                        placeholder=\"Bottom Text\"\n                        onChange={this.handleChange}\n                      />\n                    </Form.Group>\n                    <input type=\"submit\" className=\"btn btn-info\" value=\"Gen\"/>\n                  </Form>\n                  <br />\n                  <div className=\"container\">\n                    <img src={this.state.randomImg} className=\"img-fluid\" alt=\"\" />\n                    <h1 className=\"top\">{this.state.topText}</h1>\n                    <h1 className=\"bottom\">{this.state.bottomText}</h1>\n                  </div>\n                </Col>\n                <Col md=\"3\"></Col>\n              </Row>\n            </Container>\n          </div>\n        );\n    }\n}\n\nexport default MemeGenerator\n","import './App.css';\nimport Header from './Header'\nimport MemeGenerator from './MemeGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <MemeGenerator/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}